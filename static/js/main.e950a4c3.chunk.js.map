{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","topContainer","minWidth","backgroundColor","minHeight","height","border","borderRadius","bottomContainer","footer","padding","rootBottom","width","marginTop","rootTop","list","marginBottom","textAlign","icons","iconsElement","color","name","fontSize","introduce","buttons","buttonElement","marginLeft","footerButton","footerIcons","Boolean","window","location","hostname","match","ReactDOM","render","classes","Fragment","CssBaseline","Container","maxWidth","className","Typography","component","Button","size","List","aria-label","ListItem","button","ListItemIcon","ListItemText","primary","kontakt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e950a4c3.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { FaLinkedin, FaGithub } from \"react-icons/fa\";\n\n\nconst useStyles = makeStyles(theme => ({\n\n  topContainer:{\n    minWidth:'100%',\n    backgroundColor: \"#169565\", \n    minHeight: \"50vh\",\n    height:'100%', \n    border: '2px solid #fff', \n    borderRadius: '5px',\n  },\n\n  bottomContainer:{\n    backgroundColor: \"#157450 \", \n    minHeight: \"100vh\", \n    height:\"100%\", \n    border: '3px solid #fff', \n    borderRadius: '5px',\n  },\n\n  footer:{\n    minWidth: \"100%\",\n    padding: 0,\n    backgroundColor: \"#169565\", \n    minHeight: \"15vh\",\n    height:'100%', \n    border: '2px solid #fff', \n    borderRadius: '5px',\n  },\n\n  rootBottom: {\n    width: \"100%\",\n    padding: 15,\n    marginTop: '-10vh'\n  },\n\n  rootTop: {\n    width: \"100%\",\n    padding: 50,\n  },\n\n  list: {\n    border: '2px solid red',\n    borderRadius: '5px',\n    padding:35,\n    marginBottom:10,\n    textAlign: 'center',\n    backgroundColor: 'blue',\n  },\n  icons:{\n    textAlign:'right',\n  },\n\n  iconsElement:{\n    color:'white',\n  },\n\n  name:{\n    textAlign:'center',\n    color: 'white',\n    fontSize: '25px',\n  },\n\n  introduce:{\n    textAlign:'center',\n    color:'blue',\n  },\n\n  buttons:{\n    textAlign:'center',\n    color:'blue',\n  },\n\n  buttonElement:{\n    marginLeft: '5px',\n    padding: 5,\n    backgroundColor: 'red',\n  },\n\n  footerButton:{\n    textAlign:'center',\n    marginTop: '3vh',\n  },\n\n  footerIcons:{\n    textAlign:'center',\n    marginTop: '3vh',\n    color: 'white',\n  },\n}));\n\nfunction ListItemLink(props) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\nexport default function SimpleList() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"sm\" className={classes.topContainer}>\n        <Container maxWidth=\"sm\" className={classes.rootTop}>\n\n          <Typography component=\"div\" className={classes.icons}>\n            <FaGithub className={classes.iconsElement}/>\n            <FaLinkedin className={classes.iconsElement}/>\n          </Typography>\n          <Typography component=\"div\" className={classes.name}>\n            Hello My name is Cezary and this is my portfolio!\n          </Typography>\n          <Typography component=\"h2\" className={classes.introduce}>\n            Junior developer with basics react,angular and python.\n          </Typography>\n          <Typography component=\"h2\" className={classes.buttons}>\n            <Button size=\"small\" className={classes.buttonElement}>Portfolio</Button>\n            <Button size=\"small\" className={classes.buttonElement}>CV</Button>\n          </Typography>\n        </Container>\n      </Container>\n\n\n      <Container maxWidth=\"sm\" className={classes.bottomContainer} >\n        <Typography component=\"div\">\n          <div className={classes.rootBottom}>\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\n              <ListItem button className={classes.list}>\n                <ListItemIcon>\n                  <InboxIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Inbox\" />\n              </ListItem>\n              <ListItem button className={classes.list}>\n                <ListItemIcon>\n                  <DraftsIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Drafts\" />\n              </ListItem>\n            </List>\n          </div>\n          <div className={classes.kontakt}>\n            Kontakt\n          </div>\n        </Typography>\n      </Container>\n\n      <Container maxWidth=\"sm\" className={classes.footer}>\n        <Typography component=\"div\" className={classes.footerButton}>\n          <Button size=\"small\">Button</Button>\n        </Typography>\n        <Typography component=\"div\" className={classes.footerIcons}>\n          <FaGithub />\n          <FaLinkedin />\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}